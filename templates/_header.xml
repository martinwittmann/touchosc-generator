{%- macro render(component, parent, arguments=False, index=0, column=0, row=0) -%}

  {# All variables we intend to change, need to go into the namespace. #}
  {%- set ns = namespace(
    component=component,
    arguments={}
  ) -%}

  {#- Set arguments, and let children override their parent's values. -#}
  {%- if 'args' in parent and parent.args -%}
    {% set ns.arguments = ns.arguments|merge(parent.args) -%}
  {%- endif -%}

  {%- if 'args' in component and component.args -%}
    {% set ns.arguments = ns.arguments|merge(component.args) -%}
  {%- endif -%}


  {%- if ns.component.type in reusable_components -%}
    {# Set defaults from reusable component. #}
    {%- set reused_component = reusable_components[ns.component.type] -%}
    {% set ns.component = reused_component|merge(ns.component, {'type': reused_component.type}) %}
  {%- endif -%}

  {%- set component_defaults = {
      'x': 0,
      'y': 0,
      'width': 100,
      'height': 100,
  } -%}
  {%- if ns.component.type == 'tabpage' -%}
    {#- Set tabpage default values since this will always take up all available space. -#}
    {%- set component_defaults = {
        'x': 0,
        'y': 0,
        'width': '100%',
        'height': '100%',
    } -%}
  {%- endif -%}
  {%- set ns.component = component_defaults|merge(ns.component) -%}
  {%- set ns.component = ns.component|merge({'args': ns.arguments}) -%}


  {#- Apply placeholders to all properties. -#}
  {%- for key in ns.component -%}
    {%- set value = ns.component[key] -%}

    {# Handle all string values and text, name, osc #}
    {%- if value is string or key in ['text', 'name', 'osc'] and key != 'args' -%}
      {%- set new_value = value|placeholders(data, ns.arguments, index, column, row) -%}

      {%- if key in ['text', 'name', 'osc'] -%}
        {%- set new_value = new_value|b64encode -%}
      {%- endif -%}

      {% set ns.component = ns.component|merge({ key: new_value }) %}
    {%- endif -%}

  {%- endfor -%}
  
  {%- set calculated_width = ns.component.width -%}
  {%- if ns.component.width[-1] == '%' -%}
    {#- Calculate this component's width by its parent's width. -#}
    {%- set calculated_width = (ns.component.width[:-1]|float / 100) * parent.width|float -%}
  {%- endif -%}

  {%- set calculated_height = ns.component.height -%}
  {%- if ns.component.height[-1] == '%' -%}
    {#- Calculate this component's height by its parent's width. -#}
    {%- set calculated_height = (ns.component.height[:-1]|float / 100) * parent.height|float -%}
  {%- endif -%}

  {%- set x_offset = ns.component.x|float -%}
  {%- if ns.component.x[-1] == '%' -%}
    {#- Calculate this component's x_offset by its parent's width. -#}
    {%- set x_offset = (ns.component.x[:-1]|float / 100) * parent.width|float -%}
  {%- endif -%}

  {%- set y_offset = ns.component.y|float -%}
  {%- if ns.component.y[-1] == '%' -%}
    {#- Calculate this component's y_offset by its parent's width. -#}
    {%- set y_offset = (ns.component.y[:-1]|float / 100) * parent.height|float -%}
  {%- endif -%}


  {%- set ns.component = ns.component|merge({
    'width': calculated_width|int,
    'height': calculated_height|int,
    'x': (parent.x|float + x_offset)|int,
    'y': (parent.y|float + y_offset)|int,
  }) -%}



  {#- At this point, component x, y, width and height need to be absolute values/coordinates. -#}
  {#-
    Note that we need to set the component variable outside of ns since this is
    what each template uses.
   -#}
  {% set component = ns.component %}
  {%- include component.type ~ '.xml' -%}


{%- endmacro -%}

{%- macro midi(component) -%}
  {%- if 'midi_color' in component -%}
    {%- set midi_data = {
      'change_type': 'c',
      'message_type': component.midi_color.message_type,
      'channel': component.midi_color.channel,
      'data1': component.midi_color.data1,
      'value_from': component.midi_color.value_from,
      'value_to': component.midi_color.value_to,
    } -%}
    {%- include('_midi.xml') -%}
  {%- endif -%}

  {%- if 'midi_value' in component -%}
    {%- set midi_data = {
      'change_type': 'x',
      'message_type': component.midi_value.message_type,
      'channel': component.midi_value.channel,
      'data1': component.midi_value.data1,
      'value_from': component.midi_value.value_from,
      'value_to': component.midi_value.value_to,
    } -%}
    {%- include('_midi.xml') -%}
  {%- endif -%}
{%- endmacro -%}